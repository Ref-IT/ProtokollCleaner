<?php 
	$param = $param;
	$now = date_create();
?>
{{template>:vorlagen:Protokoll
|Gremium=StuRa
|Jahr=<?= $param['date']->format('Y'); ?> 
|Monat=<?= $param['date']->format('m'); ?> 
|Tag=<?= $param['date']->format('d'); ?> 
|von=<?= ($now->getTimestamp() - $param['date']->getTimestamp() > 0 )? $now->format('H:i'): $param['date']->format('H:i'); ?> 
|bis=FIXME
|Sitzungsleitung=<?= ($param['proto']['management'])? $param['members'][$param['proto']['management']]['name'] : 'FIXME' ?> 
|Protokollierung=<?= ($param['proto']['protocol'])? $param['members'][$param['proto']['protocol']]['name'] : 'FIXME' ?> 
}}

====== <?= ($param['nthproto'])? str_pad($param['nthproto'], 2, "0", STR_PAD_LEFT): 'XX'; ?>. StuRa-Sitzung ======

===== Organisatorisches =====

==== Begrüßung und Feststellung der Beschlussfähigkeit ====
<?php //
	$memberNameIdMap = [];
	$counter = [
		'stimmberechtigtAnwesend' => 0,
		'stimmberechtigt' => 0
	];
	
	//anwesenheit =================================================
	$stuff = ['Konsul', 'Angestellte'];
	$anwesenheit = [
		'overwrite' => [],
		'base' => [],
		'angestellt' => [],
		'referate' => []
	];
	
	//member loop --- handle DB data ==============================
	$trr = []; // temp reverse resort
	foreach ($param['members'] as $id => $m){
		$memberNameIdMap[$m['name']] = $id;
		// Mitglieder
		if ($m['flag_elected']) $anwesenheit['base'][$m['name']] = $m['job'];
		// overwrite
		if ($m['overwrite']!==NULL) $anwesenheit['overwrite'][$m['name']] = $m['overwrite'];
		// stuff
		if ($m['flag_stuff']){
			foreach ($stuff as $s){
				if (strpos(strtolower($m['job']), strtolower($s)) !== false){
					$anwesenheit['angestellt'][$m['name']] = $s;
				}
			}
		}
		//referate / active /or non of all - anwesenheit list
		if (!$m['flag_stuff'] && !$m['flag_elected']){
			$anwesenheit['referate'][$m['name']] = ($m['flag_active']&&!$m['job'])? 'Aktiv' : $m['job'];
		} 
		//counter
		if ($m['flag_stuff'] && $m['overwrite'] != '(ruhend)') $counter['stimmberechtigt']++;
		if ($m['stateName'] == 'J' && $m['flag_stuff']) $counter['stimmberechtigtAnwesend']++;
		//job / resort reverse
		if ($m['job'] != '' // member has job
			&& $m['overwrite'] != '(ruhend)' // member is not present (overwrite)
			&& $m['overwrite'] != 'N' 		 // member is not present (overwrite)
			&& $m['overwrite'] != 'E' 		 // member is not present (overwrite)
			&& $m['stateName'] != 'N'		 // member is not present
			&& $m['stateName'] != 'E'){ 	 // member is not present
			$jobs = (strpos($m['job'], ',')!== false)? explode(',', $m['job']) : [$m['job']];
			foreach ($jobs as $k => $j){
				$j = mb_strtolower(trim(strip_tags($j)));
				$trr[$j] = $m['name'];
				if (mb_strpos($j, 'hv')!==false){
					$tj = str_replace('hv', 'ref finanzen', $j);
					$trr[$tj] = $m['name'];
				}
				if ($j == 'hv'){
					$tj = 'leitung ref finanzen';
					$trr[$tj] = $m['name'];
				}
				if (mb_strpos($j, 'sport')!==false){
					$tj = str_replace('sport', 'sug', $j);
					$trr[$tj] = $m['name'];
				}
				if (mb_strpos($j, 'sport')!==false){
					$trr['sport, umwelt und gesundheit'] = $m['name'];
				}
				if (mb_strpos($j, 'kts')!==false){
					$trr['ref kts'] = $m['name'];
				}
			}
		}
	}
	ksort($anwesenheit['base']);
	ksort($anwesenheit['referate']);
	asort($anwesenheit['angestellt']);
	
	//resorts =====================================================
	$resortHeadlines = [
		'Referat'	=> 'Referate',
		'FSR'		=> 'Fachschaftsräte',
		'AG'		=> 'Berichte aus AGs und von Verantwortlichen',
	];
	$resorts = [
		'Referat'	=> [],
		'FSR' 		=> [],
		'AG' 		=> []
	];
	foreach($param['resorts'] as $resort){
		if (isset($resorts[$resort['type']])){
			$k = mb_strtolower($resort['name']);
			$ks = ($resort['name_short'])? mb_strtolower($resort['name_short']): '';
			$t = $resort['type'];
			$resorts[$t][$resort['name']] = '';
			
			// REFERAT
			if ($t == 'Referat' && isset($trr['leitung ref '.$k])){
				$resorts[$t][$resort['name']] = $trr['leitung ref '.$k];
			} elseif ($t == 'Referat' && isset($trr['stellv. ref '.$k])){
				$resorts[$t][$resort['name']] = $trr['stellv. ref '.$k];
			} elseif ($t == 'Referat' && isset($trr['ref '.$k])){
				$resorts[$t][$resort['name']] = $trr['ref '.$k];
			} elseif ($t == 'Referat' && $ks != '' && isset($trr['leitung ref '.$ks])){
				$resorts[$t][$resort['name']] = $trr['leitung ref '.$ks];
			} elseif ($t == 'Referat' && $ks != '' && isset($trr['stellv. ref '.$ks])){
				$resorts[$t][$resort['name']] = $trr['stellv. ref '.$ks];
			} elseif ($t == 'Referat' && $ks != '' && isset($trr['ref '.$ks])){
				$resorts[$t][$resort['name']] = $trr['ref '.$ks];
			} // AG
			elseif ($t == 'AG' && isset($trr['ag '.$k])){
				$resorts[$t][$resort['name']] = $trr['ag '.$k];
			} elseif ($t == 'AG' && $ks != '' && isset($trr['ag '.$ks])){
				$resorts[$t][$resort['name']] = $trr['ag '.$ks];
			} // FSR
			elseif ($t == 'FSR' && isset($trr['entsandt fsr '.$k])){
				$resorts[$t][$resort['name']] = $trr['entsandt fsr '.$k];
			} elseif ($t == 'FSR' && isset($trr['fsr '.$k])){
				$resorts[$t][$resort['name']] = $trr['fsr '.$k];
			}
		}
	}
	
	// ==================================================================
	// update counter stringlength
	foreach ($anwesenheit as $kat => $mem){
		$kat = ucfirst($kat);
		$counter['member'.$kat] = 0;
		$counter['member'.$kat.'Job'] = 0;
		foreach ($mem as $name => $job){
			$counter['member'.$kat] = max($counter['member'.$kat], mb_strlen($name)+mb_strlen($job));
		}
	}
?>

  * <?= $counter['stimmberechtigtAnwesend']; ?> stimmberechtigte Mitglieder -> FIXME keine beschlussfähige Sitzung
  * Anwesenheit (stimmberechtigt): 
  
^ Mitglieder (besonderer Tätigkeitsbereich)                                   ^  Anwesend (J/N/E)  ^<?php 
	foreach ($anwesenheit['base'] as $name => $job){
		$state = strtoupper( isset($memberNameIdMap[$name]) ? $param['members'][$memberNameIdMap[$name]]['stateName'] : 'FIXME');
		if (isset($anwesenheit['overwrite'][$name])) $state = $anwesenheit['overwrite'][$name];
		
		echo "\n| "
			.mb_str_pad('[[:person:'.$name.']]' . ($job?' ('.$job.')':''), $counter['memberBase'] + 15, ' ', STR_PAD_RIGHT)
			.' | '.
			mb_str_pad	($state, 10, ' ', STR_PAD_BOTH)
			.' | ';
	}

?>

^ Angestellte                                                                 ^  Anwesend (J/N/E)  ^<?php 
	foreach ($anwesenheit['angestellt'] as $name => $job){
		$state = strtoupper( isset($memberNameIdMap[$name]) ? $param['members'][$memberNameIdMap[$name]]['stateName'] : 'FIXME');
		if (isset($anwesenheit['overwrite'][$name])) $state = $anwesenheit['overwrite'][$name];
	
		echo "\n| "
			.mb_str_pad('[[:person:'.$name.']]' . ($job?' ('.$job.')':''), $counter['memberAngestellt'] + 15, ' ', STR_PAD_RIGHT)
			.' | '.
			mb_str_pad($state, 10, ' ', STR_PAD_BOTH)
			.' | ';
	}
?>

^ Referatsleiter*innen / StuRa-Aktive / Beratende Mitglieder                      ^  Anwesend (J/N/E)  ^<?php 
	foreach ($anwesenheit['referate'] as $name => $job){
		$state = strtoupper( isset($memberNameIdMap[$name]) ? $param['members'][$memberNameIdMap[$name]]['stateName'] : 'FIXME');
		if (isset($anwesenheit['overwrite'][$name])) $state = $anwesenheit['overwrite'][$name];
	
		echo "\n| "
			.mb_str_pad('[[:person:'.$name.']]' . ($job?' ('.$job.')':''), $counter['memberReferate'] + 15, ' ', STR_PAD_RIGHT)
			.' | '.
			mb_str_pad($state, 10, ' ', STR_PAD_BOTH)
			.' | ';
	}
?>



^ Gäste               ^ ^
^  Name(n)  ^ Organisation / Verein ^
| XX                    | XX        |
| XX                    | XX        |


==== Tagesordnung ====

//nicht zutreffendes Template streichen//
//NUR TOPS MIT GESCHÄTZTER ZEIT UND ZIELSETZUNG ANNEHMEN//

{{template>:vorlagen:stimmen|Titel=Der StuRa stimmt der Tagesordnung zu.|J=XX|N=XX|E=XX|S=angenommen/abgelehnt}}

{{template>:vorlagen:stimmen|Titel=Der StuRa stimmt den oben genannten Änderungen in der Tagesordnung zu.|J=XX|N=XX|E=XX|S=angenommen/abgelehnt}}

==== Alte TODO's ==== 
  * [[<?= BASE_URL.BASE_SUBDIRECTORY.'todo/list'; ?>|Liste im ProtocolHelper Tool]]
  * TODO (FIXME | DELETEME)

==== Protokollkontrolle ====
<?php 
	foreach ($param['openProtocols']['notAgreed'] as $prot){
		$newproto = (isset($param['openProtocols']['newproto'][$prot['date']]))?$param['openProtocols']['newproto'][$prot['date']]: NULL;
		echo "\n  * [[".$param['protoInternLink'] . $prot['name']."|Protokoll vom ".$prot['name']."]] Protokollverantwortliche*r: [[:person:".((isset($newproto['management']))?$param['members'][$newproto['management']]['name']:'XXX')."]]";
	}
	echo "\n";
	foreach ($param['openProtocols']['notAgreed'] as $prot){
		echo "\n {{template>:vorlagen:stimmen|Titel=Der StuRa beschließt das Protokoll der Sitzung vom ".date_create_from_format('Y-m-d', $prot['date'])->format('d.m.Y')." in der im Wiki vorliegenden Fassung.|J=|N=|E=|S=angenommen/abgelehnt}}\n";
	}
	echo "\n";
?>

==== Verkündung von Umlaufabstimmungen ====

  * keine seit der letzten Sitzung getätigten Umlaufabstimmungen

===== Übergeordnete Themen =====
<?php 

$tops = $param['tops'];

$tcount = 1;
foreach ($tops as $id => $top){
	if (!$top['resort']){
		echo "\n".str_repeat('=', $top['level']).' Top '.$tcount.': '.$top['headline'].' '.str_repeat('=', $top['level']);
		$tcount++;
		echo "\n".'//[[:person:'.($top['person']?$top['person']:'').']] berichtet, geschätzte benötigte Zeit: '.($top['expected_duration']?$top['expected_duration']:'XX').' min, real benötigte Zeit: XX min, Zielsetzung: '.($top['goal']?$top['goal']:'XXX').'//';
		if ($top['filecounter']>0){
			/* @var $file SILMPH\File */
			foreach ($param['files'][$top['id']] as $file){
				echo "\n{{:". $param['protoAttachBasePath'] .':'. $param['date']->format('Y-m-d').':'. $file->filename. ($file->fileextension?'.'.$file->fileextension:'') . '}}';
			}
		}
		echo "\n\n".$top['text']."\n";
		unset($tops[$id]);
	}
}

?>

===== Angestellte =====
<?php 
foreach ($anwesenheit['angestellt'] as $name => $job){
	echo "\n==== $job ====";
	$found = false;
	foreach ($tops as $id => $top){
		if (isset($top['resort']) && $param['resorts'][$top['resort']]['type'] == 'Angestellte' && $param['resorts'][$top['resort']]['name'] == $job){
			echo "\n".'//[[:person:'.($top['person']?$top['person']:((isset($trr[mb_strtolower($job)]))?$trr[mb_strtolower($job)]:'')).']] berichtet, geschätzte benötigte Zeit: '.($top['expected_duration']?$top['expected_duration']:'XX').' min, real benötigte Zeit: XX min, Zielsetzung: '.($top['goal']?$top['goal']:'XXX').'//';
			echo "\n\n".$top['text']."\n";
			unset($tops[$id]);
			$found = true;
		}
	}
	if (!$found){
		echo "\n".'//[[:person:'.((isset($trr[mb_strtolower($job)]))?$trr[mb_strtolower($job)]:'').']] berichtet, geschätzte benötigte Zeit: XX min, real benötigte Zeit: XX min, Zielsetzung: XXX//';
		echo "\n\n  * nicht anwesend\n";
	}
}
?><?php 

foreach ($resorts as $job => $resortList){
	echo "\n\n===== {$resortHeadlines[$job]} =====\n";
	
	foreach ($resortList as $resortName => $who){
		if ($resortName == 'Konferenz Thüringer Studierendenschaften (KTS)'){
			echo "\n==== $resortName ====";
		} else {
			echo "\n==== $job $resortName ====";
		}
		$found = false;
		foreach ($tops as $id => $top){
			if (isset($top['resort']) // is resort top
				&& $param['resorts'][$top['resort']]['type'] == $job // is current resort type
				&& $param['resorts'][$top['resort']]['name'] == $resortName){ // is current resort name
				echo "\n".'//[[:person:'.($top['person']?$top['person']:'').']] berichtet, geschätzte benötigte Zeit: '.($top['expected_duration']?$top['expected_duration']:'XX').' min, real benötigte Zeit: XX min, Zielsetzung: '.($top['goal']?$top['goal']:'XXX').'//';
				echo "\n\n".$top['text']."\n";
				unset($tops[$id]);
				$found = true;
			}
		}
		if (!$found){
			echo "\n".'//[[:person:'.$who.']] berichtet, geschätzte benötigte Zeit: XX min, real benötigte Zeit: XX min, Zielsetzung: XXX//';
			
			if ($resortName == 'Finanzen') {
				echo "\n\n=== Ausgaben, die einen StuRa-Beschluss benötigen ===";
				echo "\n\n=== Ausgaben, die vom HV genehmigt wurden ===";
			}
			echo "\n";
		}
	}
}

?>

===== Sonstiges =====

==== Campus-Veranstaltungen kommende Woche ====
  * 

==== Nächste Sitzungsleitung und Protokollperson ====
  * [[<?= BASE_URL.BASE_SUBDIRECTORY.'invite'; ?>|Liste im ProtocolHelper Tool]]
  * Die nächste Sitzung leitet [[person:FIXME]]
  * Die Verantwortung des Protokolls der nächsten Sitzung hat [[person:FIXME]]
  * Die aktuelle Sitzungsleitung informiert diese Personen darüber und verweist sie auf den [[leitfaden:sitzungsleitung|Leitfaden Sitzungsleitung]]

===== Anlagen =====

{{medialist><?= $param['protoAttachBasePath'] ?>:<?= $param['date']->format('Y-m-d') ?>}}
